// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dir_descriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dir_5fdescriptor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dir_5fdescriptor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dir_5fdescriptor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dir_5fdescriptor_2eproto {
  static const uint32_t offsets[];
};
class Entity;
struct EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Entity* Arena::CreateMaybeMessage<::Entity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Entity_Type : int {
  Entity_Type_FILE = 0,
  Entity_Type_DIRECTORY = 1,
  Entity_Type_Entity_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Entity_Type_Entity_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Entity_Type_IsValid(int value);
constexpr Entity_Type Entity_Type_Type_MIN = Entity_Type_FILE;
constexpr Entity_Type Entity_Type_Type_MAX = Entity_Type_DIRECTORY;
constexpr int Entity_Type_Type_ARRAYSIZE = Entity_Type_Type_MAX + 1;

const std::string& Entity_Type_Name(Entity_Type value);
template<typename T>
inline const std::string& Entity_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Entity_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Entity_Type_Name.");
  return Entity_Type_Name(static_cast<Entity_Type>(enum_t_value));
}
bool Entity_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Entity_Type* value);
// ===================================================================

class Entity final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Entity) */ {
 public:
  inline Entity() : Entity(nullptr) {}
  ~Entity() override;
  explicit PROTOBUF_CONSTEXPR Entity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Entity";
  }
  protected:
  explicit Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Entity_Type Type;
  static constexpr Type FILE =
    Entity_Type_FILE;
  static constexpr Type DIRECTORY =
    Entity_Type_DIRECTORY;
  static inline bool Type_IsValid(int value) {
    return Entity_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Entity_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Entity_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Entity_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Entity_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Entity_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 3,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .Entity entities = 3;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::Entity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity >*
      mutable_entities();
  private:
  const ::Entity& _internal_entities(int index) const;
  ::Entity* _internal_add_entities();
  public:
  const ::Entity& entities(int index) const;
  ::Entity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity >&
      entities() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Entity.Type type = 1;
  void clear_type();
  ::Entity_Type type() const;
  void set_type(::Entity_Type value);
  private:
  ::Entity_Type _internal_type() const;
  void _internal_set_type(::Entity_Type value);
  public:

  // @@protoc_insertion_point(class_scope:Entity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity > entities_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dir_5fdescriptor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entity

// .Entity.Type type = 1;
inline void Entity::clear_type() {
  _impl_.type_ = 0;
}
inline ::Entity_Type Entity::_internal_type() const {
  return static_cast< ::Entity_Type >(_impl_.type_);
}
inline ::Entity_Type Entity::type() const {
  // @@protoc_insertion_point(field_get:Entity.type)
  return _internal_type();
}
inline void Entity::_internal_set_type(::Entity_Type value) {
  
  _impl_.type_ = value;
}
inline void Entity::set_type(::Entity_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Entity.type)
}

// string name = 2;
inline void Entity::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Entity::name() const {
  // @@protoc_insertion_point(field_get:Entity.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entity::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Entity.name)
}
inline std::string* Entity::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Entity.name)
  return _s;
}
inline const std::string& Entity::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Entity::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Entity::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Entity::release_name() {
  // @@protoc_insertion_point(field_release:Entity.name)
  return _impl_.name_.Release();
}
inline void Entity::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Entity.name)
}

// repeated .Entity entities = 3;
inline int Entity::_internal_entities_size() const {
  return _impl_.entities_.size();
}
inline int Entity::entities_size() const {
  return _internal_entities_size();
}
inline void Entity::clear_entities() {
  _impl_.entities_.Clear();
}
inline ::Entity* Entity::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:Entity.entities)
  return _impl_.entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity >*
Entity::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:Entity.entities)
  return &_impl_.entities_;
}
inline const ::Entity& Entity::_internal_entities(int index) const {
  return _impl_.entities_.Get(index);
}
inline const ::Entity& Entity::entities(int index) const {
  // @@protoc_insertion_point(field_get:Entity.entities)
  return _internal_entities(index);
}
inline ::Entity* Entity::_internal_add_entities() {
  return _impl_.entities_.Add();
}
inline ::Entity* Entity::add_entities() {
  ::Entity* _add = _internal_add_entities();
  // @@protoc_insertion_point(field_add:Entity.entities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entity >&
Entity::entities() const {
  // @@protoc_insertion_point(field_list:Entity.entities)
  return _impl_.entities_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Entity_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dir_5fdescriptor_2eproto
