// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: comms/entity.proto
// Protobuf C++ Version: 5.29.3

#ifndef comms_2fentity_2eproto_2epb_2eh
#define comms_2fentity_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_comms_2fentity_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_comms_2fentity_2eproto {
  static const ::uint32_t offsets[];
};
class Entity;
struct EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum Entity_Type : int {
  Entity_Type_FILE = 0,
  Entity_Type_DIRECTORY = 1,
  Entity_Type_Entity_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Entity_Type_Entity_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Entity_Type_IsValid(int value);
extern const uint32_t Entity_Type_internal_data_[];
constexpr Entity_Type Entity_Type_Type_MIN = static_cast<Entity_Type>(0);
constexpr Entity_Type Entity_Type_Type_MAX = static_cast<Entity_Type>(1);
constexpr int Entity_Type_Type_ARRAYSIZE = 1 + 1;
const std::string& Entity_Type_Name(Entity_Type value);
template <typename T>
const std::string& Entity_Type_Name(T value) {
  static_assert(std::is_same<T, Entity_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Entity_Type_Name(static_cast<Entity_Type>(value));
}
bool Entity_Type_Parse(absl::string_view name, Entity_Type* value);

// ===================================================================


// -------------------------------------------------------------------

class Entity final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:Entity) */ {
 public:
  inline Entity() : Entity(nullptr) {}
  ~Entity() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Entity* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Entity));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Entity(
      ::google::protobuf::internal::ConstantInitialized);

  inline Entity(const Entity& from) : Entity(nullptr, from) {}
  inline Entity(Entity&& from) noexcept
      : Entity(nullptr, std::move(from)) {}
  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
        &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Entity& a, Entity& b) { a.Swap(&b); }
  inline void Swap(Entity* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entity* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Entity>(arena);
  }
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from) { Entity::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Entity* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Entity"; }

 protected:
  explicit Entity(::google::protobuf::Arena* arena);
  Entity(::google::protobuf::Arena* arena, const Entity& from);
  Entity(::google::protobuf::Arena* arena, Entity&& from) noexcept
      : Entity(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataLite<7> _class_data_;

 public:
  // nested types ----------------------------------------------------
  using Type = Entity_Type;
  static constexpr Type FILE = Entity_Type_FILE;
  static constexpr Type DIRECTORY = Entity_Type_DIRECTORY;
  static inline bool Type_IsValid(int value) {
    return Entity_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Entity_Type_Type_MIN;
  static constexpr Type Type_MAX = Entity_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Entity_Type_Type_ARRAYSIZE;
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Entity_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Entity_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kEntitiesFieldNumber = 3,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .Entity entities = 3;
  int entities_size() const;
  private:
  int _internal_entities_size() const;

  public:
  void clear_entities() ;
  ::Entity* mutable_entities(int index);
  ::google::protobuf::RepeatedPtrField<::Entity>* mutable_entities();

  private:
  const ::google::protobuf::RepeatedPtrField<::Entity>& _internal_entities() const;
  ::google::protobuf::RepeatedPtrField<::Entity>* _internal_mutable_entities();
  public:
  const ::Entity& entities(int index) const;
  ::Entity* add_entities();
  const ::google::protobuf::RepeatedPtrField<::Entity>& entities() const;
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .Entity.Type type = 1;
  void clear_type() ;
  ::Entity_Type type() const;
  void set_type(::Entity_Type value);

  private:
  ::Entity_Type _internal_type() const;
  void _internal_set_type(::Entity_Type value);

  public:
  // @@protoc_insertion_point(class_scope:Entity)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      19, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Entity& from_msg);
    ::google::protobuf::RepeatedPtrField< ::Entity > entities_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comms_2fentity_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Entity

// .Entity.Type type = 1;
inline void Entity::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::Entity_Type Entity::type() const {
  // @@protoc_insertion_point(field_get:Entity.type)
  return _internal_type();
}
inline void Entity::set_type(::Entity_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Entity.type)
}
inline ::Entity_Type Entity::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Entity_Type>(_impl_.type_);
}
inline void Entity::_internal_set_type(::Entity_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string name = 2;
inline void Entity::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Entity::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Entity.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Entity::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Entity.name)
}
inline std::string* Entity::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Entity.name)
  return _s;
}
inline const std::string& Entity::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Entity::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Entity::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Entity::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Entity.name)
  return _impl_.name_.Release();
}
inline void Entity::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Entity.name)
}

// repeated .Entity entities = 3;
inline int Entity::_internal_entities_size() const {
  return _internal_entities().size();
}
inline int Entity::entities_size() const {
  return _internal_entities_size();
}
inline void Entity::clear_entities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entities_.Clear();
}
inline ::Entity* Entity::mutable_entities(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Entity.entities)
  return _internal_mutable_entities()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Entity>* Entity::mutable_entities()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Entity.entities)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_entities();
}
inline const ::Entity& Entity::entities(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Entity.entities)
  return _internal_entities().Get(index);
}
inline ::Entity* Entity::add_entities() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Entity* _add = _internal_mutable_entities()->Add();
  // @@protoc_insertion_point(field_add:Entity.entities)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Entity>& Entity::entities() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Entity.entities)
  return _internal_entities();
}
inline const ::google::protobuf::RepeatedPtrField<::Entity>&
Entity::_internal_entities() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entities_;
}
inline ::google::protobuf::RepeatedPtrField<::Entity>*
Entity::_internal_mutable_entities() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.entities_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Entity_Type> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // comms_2fentity_2eproto_2epb_2eh
